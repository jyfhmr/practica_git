

Si tengo un repositorio = carpeta

Alcance Local:

Todo lo que está dentro de la carpeta, tiene un alcance
global

Para un repositorio mi correo puede ser X o Y


Alcance Global:

Es para todos los repositorios dentro de mi usuario



System: 

Para toda la computadora


A lo más específico siempre se le da prioridad

>>>>>>>>>>>>>>>>>>>>>>Acceder a configuraciones<<<<<<<<<<<<<<<

* Para acceder a las configuraciones:

git config 

* Para acceder a las configuraciones globales

git config --global

* Para acceder a las configuraciones locales 

git config --local 

* Para acceder a las configuraciones de System

git config --system  



>>>>>>>>>>>Para cambiar mi username<<<<<<<<<<<<<


git config --global user.name = "Mi nombre"


>>>>>>>>>>Para cambiar mi correo<<<<<<<<<<<<<<<<<<

git config --global user.email = "jyfhmr@gmail.com"


>>>>>>>>>>Lista de configuraciones globales<<<<<<<<<<<<<

git config --global --list



>>>>>>>Configura visual studio code como editor de texto<<<<<<<<<<
//y espera a que se cierre el editor de texto para guardar
//los cambios (code es palabra reservada)

git config --global code.editor "code --wait"




>>>>>>>>Sólamente en windows<<<<<<<<<<<<<<<<

Cuando se suba un archivo desde Windows, y se descargue 
desde linux, no habrá incompatibilidad, pues en los saltos
de linea 

Windows agrega un \n\r , para los saltos de línea
Linux no hace esto, así que se pueden generar incompatibilidades
Para evitar esto se hace


git config --global core.autocrlf true



* ¿Qué es un repositorio?

Un espacio donde podemos guardar archivos, imágenes, videos
etc, que nos permite tener un control de las diferentes
versiones del mismo si es algo que se va a cambiar 
continuamente


*                       3 áreas

Repositorio: es una especie de lugar que va a 
manejar las versiones y donde está el proyecto terminado

Directorio de trabajo: son todos los documentos que bajas

Stage Area: el área intermedia, antes de subir los cambios 
al repositorio


Carpeta = Directorio 


*Crear directorios mkdir nombreCarpeta
*Eliminar directorio rmdir nombreCarpeta


>>>>>>>>Empieza un repositorio en una carpeta<<<<<<<<<

git init 



>>>>>>>>Que archivos hay?<<<<<<<<<<<<<<<<<<

ls 


>>>>>>>>>Visualizar archivos ocultos<<<<<<<<

ls -a  


>>>>>>>>>Añadir un archivo a nuestro Stage 
Para después al repositorio <<<<<<<<<<<<<<<

git add archivo.txt 


>>>>>>>Remover un archivo del stage<<<<<<<<

git remove archivo.txt 


>>>>Saber que archivos se subirán cuando hagas un 
commit o qué archivos hay en el área de preparación<<<<<<

git status


>>>>>Subir archivos al repositorio que estén en stage<<<<

git commit -m "Mensaje del commmit"


>>>>>>>Se salta la zona de Stage<<<<<<<<<<<<<<<<
Y subes los archivos


git commit -a  


>>>>>Si haces commit de un archivo eliminado<<<<<<

Se hará con el commit, pues sube los cambios 




>>>>Recuperar un archivo del área de preparación<<<<

git restore archivo.txt 


>>>>>>>Haces un rollback al último commit<<<<<<

git checkout archivo.txt



>>>>>Vuelves a la última versión del commit y 
saca los archivos del Stage<<<<<<<<<<

git reset --hard



>>>>>Cambia el nombre a un archivo<<<<<<


git mv archivo.txt archivo2.txt

--
Lo verde está preparado para subirse 
Lo rojo no lo está


>>>>>>>>>Puedes sacar el log del commit, que es un 
identificador y comparar ambos commit<<<<<<<<<<<<<

git diff log1 log2


>>>>>>Abreviar a 5 el hash que identifica el commit<<<<

git config --global core.abbrev 5


>>>>>Ver los commit hechos y sus ids<<<<<<<<<<<<<<

git log --oneline


>>>>>>>Ver los cambios en código que se hicieron<<<<<

 git diff --word-diff 7451a a784a

 HEAD APUNTA HACIA DONDE ESTAMOS AHORA <SALE CUADNO HACEMOS EL git log>


>>>>>Reemplaza el último commit<<<<<<<<<<<

 git commit --amend  



 Una rama es como una línea de tiempo


 >>>>>>Borrar un commit<<<<<<<<<

 Podemos hacerlo volviendo el HEAD el commit anterior
 de maner que el último se borra del repositorio y se 
 manda al stage

 git reset --soft hashDelCommitAlQueQuieroVolver

  git reset --hard hashDelCommitAlQueQuieroVolver

  Vuelvo al commit que indiqué, me borra todo y además en el workspace tendré dicho commit 

  Un branch: es un puntero que apunta a una copia del 
  proyecto, es una linea de tiempo independiente

  Como no afectas a la rama principal, después si los cambios tuvieron éxito se pueden integrar en la rama principal 



  >>>>>>>Crear una rama<<<<<<<<<<

  git branch uso-kevav-case 


  >>>>>Muevete a una rama<<<<<<<<<

  git checkout nueva_rama
  git switch nueva_rama  


  >>>>>>>¿En qué rama ando?<<<<<<<<<

  git branch  


 Las ramas las creas a partir de la rama en la que estás 


 
>>>>>Quiero borrar una rama<<<<<<<<<

git branch -d nombre_rama 

TIENES QUE SALIR DE LA RAMA ANTES DE BORRARLA 


>>>>>Quiero modificar una rama (cambiar name)<<<<<<<<<

git branch -m rama_que_quiero_modificar rama_modificado

ESTO ES SI NO ESTÁS EN ESA RAMA 


Los cambios que tengas en una rama, son de esa rama 



>>>>>>>>>>>MERGE<<<<<<<<<<<<<<<<


Estoy en una rama que consiguió resolver un error
y quiero mover esos cambios a la master

TE UBICAS EN MASTER

git merge nombre_de_la_rama_que_quiero_conectar 


>>>Quieres borrar un menrge?<<<<<<<

git reset --hard codigo_del_que_quiero


Las ramas muestran sus commit y de sus ramas PADRES



>>>>>>>>Resolver conflictos al hacer merge<<<<<<<<


Cuando editas el master con un commit y la parte que editaste

también se editó en la nueva branch

entonces al hacer el commit, ¿cuál cambio se guardará?
eso es un merge conflict 


>>>>>>>>>>>>.gitignore<<<<<<<<<<<<



>>>>>>>>>>>>reflog<<<<<<<<<<<<<<<<<<

Lleva un registro del HEAD que indica en donde estás parado 


>>>>>>Añade un origen al cual subir el repo<<<<<

git remote add origin https://github.com/jyfhmr/practica_git.git


>>>>>>>Sube los cambios al origen añadido<<<<<<<

git push -u origin BRANCH_QUE_QUIERO_PUSHEAR